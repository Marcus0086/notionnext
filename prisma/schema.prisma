// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id              String      @id @default(cuid())
  name            String?
  // if you are using Github OAuth, you can get rid of the username attribute (that is for Twitter OAuth)
  username        String?
  gh_username     String?
  email           String?     @unique
  emailVerified   DateTime?
  image           String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  accounts        Account[]
  sessions        Session[]
  sites           Site[]
  role            Role        @default(USER)
  accountType     AccountType @default(FREE)
  notionAuthToken String?
  notionUserId    String?
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  refresh_token_expires_in Int?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  oauth_token_secret       String?
  oauth_token              String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model SiteConfig {
  id                String  @id @default(cuid())
  rootNotionPageId  String
  rootNotionSpaceId String?

  name     String
  domain   String  @unique
  author   String
  language String?

  isPreviewImageSupportEnabled Boolean? @default(false)
  isTweetEmbedSupportEnabled   Boolean? @default(false)
  isDarkModeEnabled            Boolean? @default(false)
  isSearchEnabled              Boolean? @default(false)
  isAiSearchEnabled            Boolean? @default(false)
  isTopLoadingBarEnabled       Boolean? @default(false)
  isSiteMapEnabled             Boolean? @default(false)
  isIndexingEnabled            Boolean? @default(false)
  navbar_bg                    String?
  navbar_text_color            String?
  main_bg                      String?
  main_text_color              String?
  main_text_size               String?
  main_title_size              String?
  footer_bg                    String?
  footer_text_color            String?

  includeNotionIdInUrls Boolean?           @default(false)
  navigationStyle       NavigationStyle?   @default(default)
  footerStyle           FooterStyle?       @default(none)
  navigationLinks       NavigationLink[]
  footerIcons           FooterIcon[]
  PageUrlOverrides      PageUrlOverrides[]
  Site                  Site?
}

model PageUrlOverrides {
  id           String     @id @default(uuid())
  pagePath     String
  pageId       String
  SiteConfig   SiteConfig @relation(fields: [siteConfigId], references: [id], onDelete: Cascade)
  siteConfigId String

  @@index([siteConfigId])
}

model NavigationLink {
  id           String     @id @default(uuid())
  title        String
  pageId       String?
  url          String?
  SiteConfig   SiteConfig @relation(fields: [siteConfigId], references: [id], onDelete: Cascade)
  siteConfigId String

  @@index([siteConfigId])
}

model FooterIcon {
  id           String         @id @default(uuid())
  title        String
  icon         FooterIconType
  url          String
  SiteConfig   SiteConfig     @relation(fields: [siteConfigId], references: [id], onDelete: Cascade)
  siteConfigId String

  @@index([siteConfigId])
}

model Site {
  id             String           @id @default(cuid())
  name           String
  html           String?          @db.LongText
  css            String?          @db.LongText
  javascript     String?          @db.LongText
  description    String?          @db.Text
  logo           String?
  fontFamily     String           @default("default")
  image          String?          @db.Text
  subDomain      String?          @unique
  customDomain   String?          @unique
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  user           User?            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String?
  siteConfig     SiteConfig?      @relation(fields: [siteConfigId], references: [id])
  siteConfigId   String?          @unique
  visibility     VisibilityFilter @default(DRAFT)
  knowledgeBases KnowledgeBase[]
  languages      Language[]

  notionAuthToken String?
  notionUserId    String?

  @@index([userId])
  @@index([visibility])
  @@index([siteConfigId])
}

model Language {
  id           String        @id @default(cuid())
  name         String
  code         String
  site         Site          @relation(fields: [siteId], references: [id], onDelete: Cascade)
  siteId       String
  translations Translation[]

  @@index([siteId])
}

model Translation {
  id         String   @id @default(cuid())
  key        String
  value      String
  language   Language @relation(fields: [languageId], references: [id], onDelete: Cascade)
  languageId String

  @@index([languageId])
}

model KnowledgeBase {
  id        String   @id @default(cuid())
  name      String
  trainedAt DateTime
  isTrained Boolean  @default(false)
  site      Site     @relation(fields: [siteId], references: [id], onDelete: Cascade)
  siteId    String

  @@index([siteId])
}

enum VisibilityFilter {
  LIVE
  DRAFT
  ARCHIVED
}

enum Role {
  USER
  ADMIN
}

enum AccountType {
  PRO
  FREE
  ENTERPRISE
}

enum NavigationStyle {
  default
  custom
  shared
}

enum FooterStyle {
  none
  custom
  shared
}

enum FooterIconType {
  Twitter
  Github
  Linkedin
  Newsletter
  Youtube
  Threads
  WhatsApp
  Instagram
  Facebook
  Pinterest
  Snapchat
  Reddit
  Discord
  Slack
  Telegram
  Twitch
  GooglePlay
}
